DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:src.note_gen.models.scale:Getting intervals for scale type: MAJOR
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.models.test_chord_progression_generator:Testing valid pattern generation with pattern: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.models.test_chord_progression_generator:Pattern being tested: ['I-IV-V']
DEBUG:backend.tests.models.test_chord_progression_generator:Generated progression: [Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=F4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='F', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='A', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=G4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='B', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='D', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0), Chord(root=C4, quality=ChordQualityType.MAJOR, notes=[Note(note_name='C', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='E', octave=4, duration=1.0, velocity=64, stored_midi_number=None), Note(note_name='G', octave=4, duration=1.0, velocity=64, stored_midi_number=None)], inversion=0)]
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
DEBUG:backend.tests.conftest:Mock MongoDB client set up.
INFO:src.note_gen.models.rhythm_pattern:Validating pattern: '4 4 4 4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
INFO:src.note_gen.models.rhythm_pattern:Processing part: '4'
DEBUG:backend.tests.conftest:Mock MongoDB client restored.
