
## Application Overview

- **Purpose**: A FastAPI application for managing musical notes, chord progressions, and rhythm patterns.
- **Main Features**: 
  - CRUD operations for notes and chord progressions.
  - Support for note patterns and rhythm patterns.
  - API endpoints for user interactions.

## code quality
  - the fewer lines of code the better
  - Proceed like a senior developer // 10x Engineer
  - Do not stop working until you have implimented a feature fully and completly
  - Start by writing three paragraphs analyzing the error. DO NO JUMP TO CONCLUSIONS
  - Do not delete comments
  - When adding a new function add a description.
  - If refactored function no longer relcts description update desciption as well
  - start files with a comment of file name and path
  - be casrefule searc can have red harrings
  - only include necesarry steps
  - Pydantic V1 style `@validator` validators are deprecated. Use Pydantic V2 style `@field_validator` validators
  - The method "on_event" in class "FastAPI" is deprecated use lifespan event handlers instead.


## Key Classes
### 1. Note
- **Fields**:
  - `note_name: str` (required) - The name of the note (e.g., C, D, E).
  - `octave: int` (required) - The octave of the note.
  - `duration: int` (required) - Duration of the note in beats.
  - `velocity: int` (required) - Velocity of the note (0-127).
  - `NOTE_TO_SEMITONE: ClassVar[dict[str, int]]` - Maps note names to their semitone values.
  - `SEMITONE_TO_NOTE: ClassVar[dict[int, str]]` - Maps semitone values to their note names.

### 2. ChordProgression
- **Fields**:
  - `id: str` (optional) - Unique identifier for the chord progression.
  - `name: str` (required) - Name of the chord progression.
  - `chords: List[Chord]` (required) - List of chords in the progression.
  - `key: str` (required) - Key of the chord progression.
  - `scale_type: str` (required) - Type of scale (e.g., major, minor).
  - `complexity: float` (optional) - Complexity rating between 0 and 1.

### 3. ChordQuality
- **Fields**:
  - `quality_type: ChordQualityType` (optional) - Type of chord quality (default is `ChordQualityType.MAJOR`).

### 4. RomanNumeral
- **Fields**:
  - `scale_degree: int` (optional) - Scale degree.
  - `quality: ChordQualityType` (optional) - Quality of the chord (default is `ChordQualityType.MAJOR`).

### 5. ScaleInfo
- **Fields**:
  - `root: Note` (required) - Root note of the scale.
  - `scale_type: Optional[str]` (optional) - Type of scale (default is "major").
  - `MAJOR_SCALE_QUALITIES: ClassVar[Dict[int, ChordQualityType]]` - Chord qualities for major scales.
  - `MINOR_SCALE_QUALITIES: ClassVar[Dict[int, ChordQualityType]]` - Chord qualities for minor scales.

### 6. ChordProgressionGenerator
- **Fields**:
  - `scale_info: ScaleInfo` (required) - Information about the scale.
  - `INT_TO_ROMAN: ClassVar[Dict[int, str]]` - Mapping from integers to Roman numerals.

### 7. NoteSequence
- **Fields**:
  - `notes: List[Union[Note, int]]` (required) - List of notes.
  - `events: List[NoteEvent]` (optional) - List of note events (default is an empty list).
  - `duration: float` (optional) - Duration of the note sequence (default is 0.0).

### 8. ChordQualityType
- **Fields**: (List of chord qualities)

### 9. Chord
- **Fields**:
  - `root: Note` (required) - The root note of the chord.
  - `quality: ChordQualityType` (optional) - Quality of the chord (default is `ChordQualityType.MAJOR`).
  - `notes: List[Note]` (optional) - List of notes in the chord (default is an empty list).
  - `inversion: int` (optional) - Chord inversion (default is 0).

### 10. Scale
- **Fields**:
  - `root: Note` (required) - The root note of the scale.
  - `scale_type: ScaleType` (required) - The type of scale (e.g., major, minor).
  - `notes: List[Note]` (optional) - List of notes in the scale (default is an empty list).

### 11. ScaleDegree
- **Fields**:
  - `value: int` (required) - The degree value of the scale.

### 11. ScaleDegree
- **Fields:**
  - `value: int` (required) - The degree value of the scale.

### 12. ScaleType
- **Fields:**
  - `MAJOR = "major"`
  - `MINOR = "minor"`

### 13. NoteEvent
- **Fields:**
  - `note: Union[Note, ScaleDegree, Chord]` (required) - The note associated with the event.
  - `position: float` (optional) - Position of the note event (default is 0.0).
  - `duration: float` (optional) - Duration of the note event (default is 1.0).
  - `velocity: int` (optional) - Velocity of the note event (default is 100).
  - `channel: int` (optional) - MIDI channel (default is 0).
  - `is_rest: bool` (optional) - Indicates if the event is a rest (default is False).

### 14. PatternInterpreter
- **Fields:**
  - `scale: Scale` (required) - The scale to use for interpretation.
  - `pattern: Sequence[Union[int, str, Note, ScaleDegree, Dict[str, Any]]` (required) - The pattern to interpret.
  - `_current_index: int` (optional) - The current index in the pattern (default is 0).

### 15. NotePattern
- **Fields:**
  - `id: Optional[str]` (optional) - ID of the note pattern.
  - `name: str` (required) - Name of the note pattern.
  - `notes: Optional[List[Note]]` (optional) - List of notes in the pattern.
  - `pattern_type: Optional[str]` (optional) - Type of pattern.
  - `description: str` (required) - Pattern description.
  - `tags: List[str]` (required) - Pattern tags.
  - `complexity: Optional[float]` (optional) - Pattern complexity.
  - `data: Optional[List[int]]` (optional) - Additional pattern data.
  - `is_test: Optional[bool]` (optional) - Test flag.

## API Routes
- **Routes**: Refer to @[src/note_gen/routers/user_routes.py] for a complete list of API routes.

## Testing
- **Test Framework**: pytest
- **Key Tests**: Ensure to cover the creation and retrieval of notes, chord progressions, and other core functionalities.

## Additional Notes
- **Dependencies**: FastAPI, Pydantic, Motor, etc.
- **Environment Variables**:  AsyncIOMotorClient[Any] = AsyncIOMotorClient('mongodb://localhost:27017/')

    db: AsyncIOMotorDatabase[Any] = client['note_gen']  # Replace with your database name
