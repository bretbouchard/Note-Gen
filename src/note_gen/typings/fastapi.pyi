"""Type stubs for FastAPI."""
from typing import Any, Callable, Dict, Optional, TypeVar, Union


T = TypeVar('T')

class FastAPI:
    def __init__(self, **kwargs: Any) -> None: ...
    def get(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def post(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def put(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def delete(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def patch(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def options(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def head(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def trace(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def include_router(self, router: Any, **kwargs: Any) -> None: ...

class HTTPException(Exception):
    def __init__(self, status_code: int, detail: Any = None, headers: Optional[Dict[str, str]] = None) -> None: ...

class Response:
    def __init__(self, content: Any = None, status_code: int = 200, headers: Optional[Dict[str, str]] = None,
                 media_type: Optional[str] = None) -> None: ...

class Request:
    def __init__(self) -> None: ...
    async def json(self) -> Dict[str, Any]: ...
    async def body(self) -> bytes: ...
    async def form(self) -> Dict[str, Any]: ...
    async def files(self) -> Dict[str, Any]: ...

class APIRouter:
    def __init__(self, **kwargs: Any) -> None: ...
    def get(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def post(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def put(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def delete(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def patch(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def options(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def head(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...
    def trace(self, path: str, **kwargs: Any) -> Callable[[Callable[..., T]], Callable[..., T]]: ...

class BackgroundTasks:
    def __init__(self) -> None: ...
    def add_task(self, func: Callable[..., Any], *args: Any, **kwargs: Any) -> None: ...

class UploadFile:
    def __init__(self, filename: str = ..., content_type: str = ..., file: Any = ...) -> None: ...
    async def read(self, size: int = -1) -> bytes: ...
    def file(self) -> Any: ...
    async def write(self, data: Union[str, bytes]) -> None: ...
    async def seek(self, offset: int) -> None: ...
    async def close(self) -> None: ...

class Form:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class File:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class Path:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class Query:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class Body:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class Header:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class Cookie:
    def __init__(self, default: Any = None, **kwargs: Any) -> None: ...

class Depends:
    def __init__(self, dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True) -> None: ...
